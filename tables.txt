
1.1 Categories
Stores the taxonomy data from BigBuy’s taxonomies endpoint.

DROP TABLE IF EXISTS categories;
CREATE TABLE categories (
  id INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  parentTaxonomy INT,
  dateAdd DATETIME,
  dateUpd DATETIME,
  urlImages TEXT,
  isoCode VARCHAR(10),
  PRIMARY KEY (id)
);
=======================================
1.2 Products_t
Stores basic (base) product data such as the product’s id, SKU, weight, category, and condition.
(This table is used to join with the variations.)

sql
Copy
DROP TABLE IF EXISTS products_t;
CREATE TABLE products_t (
  id INT NOT NULL,
  sku VARCHAR(100),
  weight DECIMAL(10,3),
  category INT,        -- Foreign key to categories.id
  condition VARCHAR(50),
  PRIMARY KEY (id)
);

=======================================

1.3 Products_info_t
Holds the text information about a product (name and description) as returned by the Products Information endpoint.

sql
Copy
DROP TABLE IF EXISTS products_info_t;
CREATE TABLE products_info_t (
  id INT NOT NULL,
  sku VARCHAR(100),
  name VARCHAR(255),         -- Will be used as "title"
  description TEXT,          -- Will be used as "item_description"
  PRIMARY KEY (id)
);

=======================================

1.4 Product_variations_t
Stores each variation’s pricing and extra weight data from the Product Variations endpoint.
Each record here represents a specific variation of a product.

sql
Copy
DROP TABLE IF EXISTS product_variations_t;
CREATE TABLE product_variations_t (
  id INT NOT NULL,         -- Variation ID
  product INT NOT NULL,    -- Reference to base product id (from products_t)
  sku VARCHAR(100),
  wholesalePrice DECIMAL(10,2),   -- Used as sale_price
  retailPrice DECIMAL(10,2),      -- Used as price
  inShopsPrice DECIMAL(10,2),     -- Used as actual_price
  extraWeight DECIMAL(10,3),      -- Additional weight (if needed)
  PRIMARY KEY (id)
);

=======================================

1.5 Product_variations_stock_t
Stores stock data per variation from the Stock Variation endpoint.

sql
Copy
DROP TABLE IF EXISTS product_variations_stock_t;
CREATE TABLE product_variations_stock_t (
  id INT NOT NULL,         -- Variation ID (should match product_variations_t.id)
  stock INT NOT NULL,
  PRIMARY KEY (id)
);

=======================================

1.6 Products_images_t
Stores image URLs for products (typically the same for all variations).

sql
Copy
DROP TABLE IF EXISTS products_images_t;
CREATE TABLE products_images_t (
  id INT AUTO_INCREMENT PRIMARY KEY,
  product_id INT NOT NULL,     -- Reference to products_t.id
  image_url VARCHAR(500) NOT NULL,
  is_cover VARCHAR(5),
  UNIQUE KEY uq_product_image (product_id, image_url)
);

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////

2. Data Mapping for the Final CSV
You want your final CSV (and JSON) export to have the following structure:

json
Copy
{
  "title": "",
  "actual_price": "",
  "approved": "yes",
  "item_description": "",
  "item_category": "",
  "item_images": "",
  "item_stock": "",
  "price": "",
  "product_weight": "",
  "sale_price": ""
}
Using our redesigned tables, we map as follows:

title: → from products_info_t.title

actual_price: → from product_variations_t.inShopsPrice

approved: → constant "yes"

item_description: → from products_info_t.item_description

item_category: → join products_t.category to categories.id and use categories.name

item_images: → aggregate image URLs from products_images_t where product_id = products_t.id

item_stock: → from product_variations_stock_t.stock 

price: → from product_variations_t.retailPrice

product_weight: → from products_t.weight 

sale_price: → from product_variations_t.wholesalePrice


